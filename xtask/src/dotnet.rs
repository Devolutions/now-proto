use crate::prelude::*;
use std::env;
use std::path::{Path, PathBuf};

pub fn fmt(sh: &Shell) -> anyhow::Result<()> {
    let _s = Section::new("DOTNET-FORMATTING");

    let output = cmd!(sh, "dotnet format --verify-no-changes").ignore_status().output()?;

    if !output.status.success() {
        anyhow::bail!("Bad formatting, please run 'dotnet format'");
    }

    println!("All good!");

    Ok(())
}

pub fn get_target_arch() -> anyhow::Result<&'static str> {
    match env::consts::ARCH {
        "x86_64" => Ok("x64"),
        "aarch64" => Ok("ARM64"),
        _ => anyhow::bail!("Unsupported architecture: {}", env::consts::ARCH),
    }
}

pub fn get_dotnet_output_path() -> anyhow::Result<PathBuf> {
    let arch_folder = get_target_arch()?;
    let build_config = "Debug";
    let target_framework = "net8.0";

    let output_path = Path::new("nugets")
        .join("Devolutions.NowProto")
        .join("bin")
        .join(arch_folder)
        .join(build_config)
        .join(target_framework);

    Ok(output_path)
}

pub fn build(sh: &Shell) -> anyhow::Result<()> {
    let _s = Section::new("DOTNET-BUILD");

    let platform = get_target_arch()?;
    cmd!(sh, "dotnet build -p:Platform={platform}").run()?;

    if is_verbose() {
        let build_path = get_dotnet_output_path()?;
        if !build_path.exists() {
            anyhow::bail!("Expected build output directory does not exist: {:?}", build_path);
        }

        list_files(sh, build_path.to_str().unwrap()).context("failed to list artifacts generated by dotnet build")?;
    }

    println!("All good!");

    Ok(())
}

pub fn tests_run(sh: &Shell) -> anyhow::Result<()> {
    let _s = Section::new("DOTNET-TESTS-RUN");

    let platform = get_target_arch()?;

    cmd!(sh, "dotnet test -p:Platform={platform}").run()?;

    println!("All good!");

    Ok(())
}
